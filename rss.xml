<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Luis' Webscience]]></title><description><![CDATA[Web, JavaScript에 관한 이야기]]></description><link>http://github.com/dylan/node-rss</link><image><url>/public/img/favorite.png</url><title>Luis&apos; Webscience</title><link></link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 19 May 2014 02:57:05 GMT</lastBuildDate><atom:link href="/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[자바스크립트 제대로 배우기 - 7. 함수 표현식]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/4400fbdafe7989d1e078275ef66f27f2?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_96">자바스크립트 제대로 배우기6 - 7. 함수 표현식</h1>
<p><em class="label "><strong>이 포스팅은 페이스북 자바스크립트 제대로 배우기 그룹의 공부 내용을 요약한 것입니다.</strong></em><br>
출처 : &lt;&lt;프론트엔드 개발자를 위한 자바스크립트&gt;&gt;(2013 인사이트, 한선용 옮김)</p>
<h3 id="toc_97">7장 함수 표현식</h3>

<ul>
<li>함수를 정의하는 방법은 <code>함수 선언</code>, <code>함수 표현식</code> 두 가지 방법</li>
<li>파이어폭스, 크롬, 사파리, 오페라는 모두 함수에 비표준 프로퍼티 named을 지원

<ul>
<li>functionName.name 으로 함수의 이름을 가져올 수 있음</li>
</ul></li>
<li>함수 호이스팅(hoisting)

<ul>
<li>함수 선언의 특징</li>
<li>함수 선언부를 다른 코드보다 먼저 읽고 실행함</li>
</ul></li>
<li>함수 표현식의 가장 많이 쓰이는 형태는

<ul>
<li><code>javascript var functionName = function(args){..};</code></li>
<li>이렇게 생성된 함수는 function 키워드 다음에 함수의 이름이 없으므로 <code>익명 함수</code>로 가정</li>
<li>때때로 익명 함수를 람다(lamda)함수라고 부르기도 함</li>
<li>이 함수의 name 프로퍼티는 빈 문자열</li>
</ul></li>
<li>함수 선언과 함수 표현식 방법의 차이

<ul>
<li>자바스크립트에는 함수 오버로딩이 없기 때문에 같은 함수를 조건에 따라 여러개 만들지 못함</li>
<li>함수 선언으로는 같은 함수를 여러 번 선언 시 마지막 함수가 보통 사용됨</li>
<li>함수 표현식을 이용하면 조건식에 따라 변수에 각각 다른 함수 표현식을 할당하는 방법으로 사용 가능
<code>javascript
varhello;
if(condition){
    hello = function(){
        console.log(&quot;Hi!&quot;);
    };
}else{
    hello = function(){
        console.log(&quot;Man~&quot;);
    };
}
</code></li>
</ul></li>
<li>5장에서 createComparisonFunction()과 같은 방법으로 사용가능</li>
<li>값처럼 쓰이는 함수를 함수 표현식이라 부름</li>
</ul>

<h4 id="toc_98">7.1 재귀</h4>

<ul>
<li>함수가 자기 자신을 이름으로 호출하는 형태</li>
<li>재귀 호출 시 자신의 이름을 쓰지 않고 <code>arguments.callee</code>를 쓰면 함수를 다른 변수에 할당해도 정확히 동작함</li>
<li>재귀 함수를 사용할 때는 항상 함수 이름 대신 <code>arguments.callee</code>를 쓰기를 권함</li>
<li>스트릭트 모드에서는 arguments.callee접근 불가능</li>
<li>이때는 예를 들어, 이름 붙은 함수 표현식 f()를 생성해 변수 factorial에 할당하면 스트릭트와 비스트릭트 모드에서 잘 동작</li>
</ul>

<h4 id="toc_99">7.2 클로저</h4>

<ul>
<li>익명함수와 클로저는 자주 <code>잘못</code> 혼용됨</li>
<li><code>클로저</code>란 다른 함수의 스코프에 있는 변수에 접근 가능한 함수</li>
<li>함수를 처음 호출할 때 일어나는 일

<ul>
<li>함수를 호출하면 실행 컨텍스트와 스코프 체인이 생성</li>
<li>(각 함수마다 실행 컨텍스트가 만들어지고 거기에 스코프체인이 연결)</li>
<li>함수의 활성화 객체는 arguments 및 이름 붙은 매개변수로 초기화됨</li>
<li>외부 함수의 활성화 객체는 스코프 체인의 두 번째 객체</li>
<li>이 과정이 포함 관계에 있는 함수에서 계속 발생하여 스코프 체인이 전역 실행 컨텍스트에서 종료될 때까지 이어짐</li>
</ul></li>
<li>함수를 실행하면 값을 읽거나 쓸 변수를 스코프 체인에서 검색

<ul>
<li>전역 컨텍스트의 변수 객체는 항상 존재하지만, 함수 같은 로컬 컨텍스트 변수 객체는 함수를 실행하는 동안에만 존재</li>
<li>스코프 체인이란 변수 객체를 가리키는 포인터 목록이며 객체를 직접 포함하는 것은 아님</li>
<li>함수 실행이 끝나면 로컬 활성화 객체는 파괴되고 메모리에는 전역 스코프만 남음</li>
</ul></li>
<li>하지만 클로저는 다르게 동작

<ul>
<li>그림7-2의 경우, createComparisonFunction의 로컬 활성화 객체가 파괴되지 않고 익명함수의 실행 컨텍스트의 스코프 체인에 추가됨</li>
<li>(다른 함수의 내부에 존재하는 함수는 외부 함수의 활성화 객체를 자신의 스코프 체인에 추가)</li>
<li>따라서 익명 함수의 스코프 체인에는 외부 함수의 활성화 객체를 가리키는 포인터가 존재(그림 7-2의 Scope Chain 2번 포인터)</li>
<li>외부 함수가 실행을 마치고 익명 함수를 반환하면 익명 함수의 스코프 체인은 외부 함수의 활성화 객체와 전역 변수 객체를 포함하도록 초기화됨 -&gt; 익명 함수는 외부 함수의 변수 전체에 접근 가능하게 됨</li>
<li>외부 함수가 실행을 마쳤는데도 활성화 객체가 파괴되지 않음(아직 익명함수의 스코프 체인에서 참조하기 때문)</li>
<li>외부 함수가 실행을 마치면 <code>외부 함수의</code> 실행 컨텍스트의 스코프 체인은 파괴되지만 활성화 객체는 익명 함수가 파괴될 때까지 메모리에 남음</li>
</ul></li>
<li>클로저는 외부 함수의 스코프를 보관해야 하므로 다른 함수에 비해 메모리를 많이 요구하므로 과용하면 메모리 문제가 생길 수 있음! -&gt; 필요한 경우에만 사용하자</li>
</ul>
]]></description><link>/post/javascript-study6-function</link><guid isPermaLink="false">javascript-study6-function</guid><dc:creator><![CDATA[<a href="luispigu" target="_blank">Luis Park</a>]]></dc:creator><pubDate>Sun, 18 May 2014 14:22:00 GMT</pubDate></item><item><title><![CDATA[자바스크립트 제대로 배우기 - 5.참조 타입]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/4400fbdafe7989d1e078275ef66f27f2?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_81">자바스크립트 제대로 배우기5 - 5. 참조 타입</h1>
<p><em class="label "><strong>이 포스팅은 페이스북 자바스크립트 제대로 배우기 그룹의 공부 내용을 요약한 것입니다.</strong></em><br>
출처 : &lt;&lt;프론트엔드 개발자를 위한 자바스크립트&gt;&gt;(2013 인사이트, 한선용 옮김)</p>
<ul>
<li>참조 값(객체)란 특정 &#39;참조 타입&#39;의 인스턴스</li>
<li>ECMAScript에서는 참조 타입은 데이터와 기능을 그룹으로 묶는 구조</li>
<li>ECMAScript는 객체지향언어이긴 하지만 <code>클래스나 인터페이스 같은 구조를 갖고 있지 않음</code></li>
<li>객체는 특정 참조 타입의 &#39;인스턴스&#39;</li>
<li>객체 생성 방법은 new 연산자 뒤에 &#39;생성자&#39;를 씀</li>
</ul>

<h3 id="toc_82">5장 참조 타입</h3>

<h4 id="toc_83">5.1 Object 타입</h4>

<ul>
<li>명시적으로 인스턴스를 생성하는 방법은 두가지</li>
<li>new 연산자와 Object 생성자 쓰는 법 / &#39;객체 리터럴&#39; 표기법</li>
<li>객체 리터럴 표기법은 프로퍼티를 여러 개 쓸 때 가독성을 확보하는 용도로만 쓰길 권함</li>
<li>객체 프로퍼티에 접근 시 일반적으로는 점 표기법이 더 좋으며, 프로퍼티 이름에 변수가 필요할 때는 대괄호 표기법 사용</li>
</ul>
]]></description><link>/post/javascript-study5-reference-type</link><guid isPermaLink="false">javascript-study5-reference-type</guid><dc:creator><![CDATA[<a href="luispigu" target="_blank">Luis Park</a>]]></dc:creator><pubDate>Tue, 06 May 2014 15:02:00 GMT</pubDate></item><item><title><![CDATA[자바스크립트 제대로 배우기 - 6.1 객체에 대한 이해]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/4400fbdafe7989d1e078275ef66f27f2?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_60">자바스크립트 제대로 배우기4 - 객체에 대한 이해</h1>
<p><em class="label "><strong>이 포스팅은 페이스북 자바스크립트 제대로 배우기 그룹의 공부 내용을 요약한 것입니다.</strong></em><br>
출처 : &lt;&lt;프론트엔드 개발자를 위한 자바스크립트&gt;&gt;(2013 인사이트, 한선용 옮김)</p>
<h2 id="toc_61">6.1 객체에 대한 이해</h2>

<ul>
<li>ECMAScript 에는 클래스 라는 개념이 없으며, EMCAScript 의 객체는 다른 클래스 기반 언어와 다름</li>
<li>객체 : 프로퍼티의 순서 없는 컬렉션이며 각 프로퍼티는 원시 값이나 객체, 함수를 포함</li>
</ul>

<h5 id="toc_62">객체 생성 :객체를 만드는 방법은 두가지가 있음</h5>

<ol>
<li>Object의 인스턴스를 만들고 프로퍼티와 메서드를 추가</li>
<li>객체 리터럴 패턴 사용</li>
</ol>
<p>현재는 아래와 같은 객체 리터럴 패턴이 많이 사용됨</p><pre><code class="javascript"><span class="keyword">var</span> student = {
    name : Luis,
    age : <span class="number">28</span>,
    id : <span class="number">12345678</span>,
    sayName: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        alert(<span class="keyword">this</span>.name);
    }
};
</code></pre>]]></description><link>/post/javascript-study4-understanding-oop</link><guid isPermaLink="false">javascript-study4-understanding-oop</guid><dc:creator><![CDATA[<a href="luispigu" target="_blank">Luis Park</a>]]></dc:creator><pubDate>Tue, 08 Apr 2014 05:39:00 GMT</pubDate></item><item><title><![CDATA[자바스크립트 제대로 배우기 - 4.변수와 스코프, 메모리]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/4400fbdafe7989d1e078275ef66f27f2?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_48">자바스크립트 제대로 배우기3 - 변수와 스코프, 메모리</h1>
<p><em class="label "><strong>이 포스팅은 페이스북 자바스크립트 제대로 배우기 그룹의 공부 내용을 요약한 것입니다.</strong></em><br>
출처 : &lt;&lt;프론트엔드 개발자를 위한 자바스크립트&gt;&gt;(2013 인사이트, 한선용 옮김)</p>
<h2 id="toc_49">4장 변수와 스코프, 메모리</h2>

<ul>
<li>자바스크립트 변수는 느슨한 타입을 취함 - 특정 시간에서 변수는 특정 값을 가리키는 이름일 뿐임</li>
</ul>

<h4 id="toc_50">4.1 원시 값과 참조 값</h4>

<ul>
<li>ECMAScript의 변수는 원시 값과 참조 값 두가지 타입의 데이터를 저장가능</li>
<li>원시 값 - 단순한 데이터로 Undefined,Null,불리언,숫자,문자열</li>
<li>참조 값 - 여러 값으로 구성되는 객체</li>
</ul>

<h5 id="toc_51">원시 값과 참조 값의 차이</h5>

<ul>
<li>참조 값을 다룰 때는 언제든 프로퍼티와 메서드를 추가하거나 바꾸고 삭제 가능</li>
<li>원시 값에는 프로퍼티가 없지만 추가하려 해도 에러가 생기지 않음 - 하지만 접근하려 하면 undefined 반환</li>
<li>참조 값을 변수에서 다른 변수로 복사하면 힙에 저장된 객체를 가리키는 포인터가 복사됨</li>
</ul>
]]></description><link>/post/javascript-study3-variable-and-scope-memory</link><guid isPermaLink="false">javascript-study3-variable-and-scope-memory</guid><dc:creator><![CDATA[<a href="luispigu" target="_blank">Luis Park</a>]]></dc:creator><pubDate>Tue, 01 Apr 2014 06:21:00 GMT</pubDate></item><item><title><![CDATA[자바스크립트 제대로 배우기 - 3.언어의 기초]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/4400fbdafe7989d1e078275ef66f27f2?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_36">자바스크립트 제대로 배우기2</h1>
<p><em class="label "><strong>이 포스팅은 페이스북 자바스크립트 제대로 배우기 그룹의 공부 내용을 요약한 것입니다.</strong></em><br>
출처 : &lt;&lt;프론트엔드 개발자를 위한 자바스크립트&gt;&gt;(2013 인사이트, 한선용 옮김)</p>
<h2 id="toc_37">3장 언어의 기초</h2>
<p><em>이 장을 읽기 전엔 주 내용인 문법이나 데이터 타입, 제어문 등이</em><br>
<em>어차피 이전에 다른 언어 공부한 경험이 있기 때문에 쉬울 거라 생각했다.</em><br>
<em>하지만 자바스크립트 만의 특징이랄까 정말 다른 부분이 많아서 생각보다 읽는데 너무 오래걸렸다.</em><br>
<em>그래서 기존 언어와 좀 다르고 많이 헷갈리는 부분 위주로 정리를 했다.</em>  </p><p><strong>아래 내용은 ECMAScript 3판에서 정의된 내용을 바탕으로 함.</strong></p>]]></description><link>/post/javascript-study2-day-basic-language</link><guid isPermaLink="false">javascript-study2-day-basic-language</guid><dc:creator><![CDATA[<a href="luispigu" target="_blank">Luis Park</a>]]></dc:creator><pubDate>Thu, 27 Mar 2014 15:41:00 GMT</pubDate></item></channel></rss>